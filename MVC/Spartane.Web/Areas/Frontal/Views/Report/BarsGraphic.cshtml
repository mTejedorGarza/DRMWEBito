@using System.Collections.Generic
@using System.Web.UI.WebControls

@using Spartane.Core.Domain.Permission
@using Spartane.Web.Areas.WebApiConsumer
@using Spartane.Web.Helpers
@{
    ViewBag.Title = "Spartan - Bars Graphic";
    //ViewBag.dataReport = ((string)ViewBag.dataReport).Replace(@"&quot;", @"""");
    string dataReport = Uri.UnescapeDataString((string)ViewBag.dataReport);
}
<link href="@Url.Content("~/Content/BootstrapDatePicker/bootstrap-datetimepicker.min.css")" rel="stylesheet" />
@Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
@Styles.Render("~/plugins/dateRangeStyles")
@Styles.Render("~/plugins/dataPickerStyles")
@Styles.Render("~/plugins/clockpickerStyles")
@Styles.Render("~/plugins/awesomeCheckboxStyles")
@Styles.Render("~/plugins/select2Styles")
@Styles.Render("~/Content/plugins/chosen/chosenStyles")
<script src="~/Scripts/plugins/chosen/chosen.jquery.js"></script>
<style>
    .MarginBottom {
        margin-bottom: 1%;
    }

    #divAdvanceSearch input {
        margin-right: 2%;
    }

    #divAdvanceSearch button {
        margin-right: 2%;
    }

    #divAdvanceSearch select {
        margin-right: 2%;
    }

    #divAdvanceSearch h3 {
        margin-top: 2%;
    }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        @*<h2>@Resources.VendedorResources.Vendedor</h2>*@
        <h2>>@ViewBag.ReportName</h2>

        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index", "Home")">@Resources.Resources.Home</a>

            </li>
            <li class="active">
                @*<strong>@Resources.VendedorResources.Vendedor</strong>*@
                <strong>>@ViewBag.ReportName</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>

<input type="hidden" value="list" name="Operation" id="Operation" />
<input type="hidden" value="true" name="IsFilterModal" id="IsFilterModal" />

<link href='http://fonts.googleapis.com/css?family=Open+Sans:300,600,400' rel='stylesheet' type='text/css'>

<span id="popupNotification"></span>
<div aria-hidden="true" data-backdrop="static" class="modal" id="AddEditFiltersModal-form" style="display: none; background-color:rgba(0, 0, 0, 0.7);">
    <div class="modal-dialog" style="width:80%;">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">
                    @Resources.Resources.AdvanceFilter
                    <button data-dismiss="modal" class="close" type="button"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                </h4>
            </div>
            <div class="modal-body AddEditFiltersModal">
            </div>
        </div>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    <input type="hidden" value="@ViewBag.IdReport" name="IdReport" id="IdReport" />
                    <div>
                        <input data-target="#advance-modal" data-toggle="modal" type="button" value="@Resources.Resources.AdvanceFilter" id="AdvanceFilter" class="btn btn-w-m btn-success btn-filter" />
                        <a href="../ClearFilter?id=@ViewBag.IdReport" class=" btn btn-primary">@Resources.Resources.ClearFilter</a>
                    </div>
                    <div id="filters">
                        @Html.Raw(ViewBag.Filters)
                    </div>

                    <div id="jsGrid">
                    </div>

                    @* Model Start Here *@

                    @using (Ajax.BeginForm("", "", new AjaxOptions { OnSuccess = "" }))
                    {

                    }

                    @* Model Print Start*@
                    <div id="exportModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="gridSystemModalLabel">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                    <h4 class="modal-title" id="gridSystemModalLabel">Export options</h4>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-md-3">Export option:</div>
                                        <div class="col-md-8 col-md-offset-0">
                                            <label class="">
                                                <input type="radio" name="optradio" value="1" checked="true">Export only current page records
                                            </label>
                                            <label class="">
                                                <input type="radio" name="optradio" value="0">Export all records
                                            </label>
                                        </div>
                                    </div>
                                    <div class="row">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                    <button type="button" id="btnPrint" class="btn btn-primary" onclick="return PrintDocument(3);">Export</button>
                                    <button type="button" id="btnPdf" class="btn btn-primary" onclick="return Export(1);">Export</button>
                                    <button type="button" id="btnExcel" class="btn btn-primary" onclick="return Export(2);">Export</button>
                                    <button type="button" id="btnCSV" class="btn btn-primary" onclick="return Export(4);">Export</button>
                                </div>
                            </div>
                            <!-- /.modal-content -->
                        </div><!-- /.modal-dialog -->
                    </div>

                    <div>
                        @*@Html.ActionLink(Resources.Resources.Create, "Create", "Vendedor", new { @class = ("btn btn-primary" + (!permission.New ? " disabled" : "")) })*@
                        @*@Html.ActionLink(@Resources.Resources.AdvanceSearch, "ShowAdvanceFilter", "Vendedor", new { previousFilters = advanceSearch }, new { @class = ("btn btn-primary") })*@
                        @*<button onclick="ClearFilter()" class=" btn btn-primary">@Resources.Resources.ClearFilter</button>*@
                    </div>
                    <div class="table-responsive">

                        @*<table id="tblReport" class="table table-striped table-bordered table-hover dataTables-example scroll_content" style="overflow-x:scroll;" cellspacing="0"></table>*@

                        <div id="flot-chart" style="width:100%; height:100%;"></div>
                        <div style="width:100%;">
                            <button class="btn btn-primary float-right" id="printGraph"><i class="fa fa-print"></i>&nbsp;Imprimir</button>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
</div>

<style>
   .select2-results{background-color:#fff;}
    .select2-container .select2-dropdown{height:auto !important; }
    .dataTables_filter {
        display: none;
    }

    div.dataTables_info {
        display: inline-block;
        float: left;
    }

    .fullWidth {
        width: 100%;
    }

    .highcharts-credits {
        display: none;
    }
</style>

<script type="text/javascript">
    var chart;

    $(document).ready(function () {
        var autocompletes = $('.AutoComplete');
        for (var i = 0; i < autocompletes.length; i++) {
            var url = $(autocompletes[i]).data('url');
            url = url_content + url;
            var id = $(autocompletes[i]).data('idfield');
            var desc = $(autocompletes[i]).data('descfield');
            $(".AutoComplete").select2({
                dropdownCssClass: 'fullWidth form-control',
                allowClear: true,
                placeholder: "Select Value...",
                ajax: {
                    url: url,
                    cache: false,
                    dataType: 'json',
                    async: true,
                    global: false,
                    data: function (params) {
                        return {
                            query: params.term,
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;

                        return {
                            results: GetAutoCompleteData(data, id, desc),
                            pagination: {
                                more: false
                            }
                        };
                    }
                },
                escapeMarkup: function (markup) { return markup; },
                minimumInputLength: 1,
            });
            var $eventExternal = $(".AutoComplete");
            $eventExternal.on("select2:open", function (e) {
                $('.select2-search__field').val(' ');
                $('.select2-search__field').keyup();
            });
            $('.select2-container').css('width', '100%');
            $('.select2-selection').css('border', 'none');
            $('.select2-selection').css('height', '34px');

        }

        $('.datepicker').datepicker({
            todayBtn: "linked",
            keyboardNavigation: false,
            forceParse: false,
            calendarWeeks: true,
            autoclose: true,
            format: "@ConfigurationProperty.DateFormatDatePicker"
        });
        $('.clockpicker').clockpicker();

        $("#frmAdvanceSearch").submit(function (e) {
            e.preventDefault();
            InitiateAdvanceSearch();
        });

        var strData = '@Html.Raw(dataReport)';
        var jsonData = JSON.parse(strData);

        var dataGraphic = {};

        if (Object.keys(jsonData[0]).length === 2) {
            dataGraphic = getSingleBarData(jsonData);
            renderSingleBarChart(dataGraphic, jsonData);
        } else {
            dataGraphic = getMultipleBarData(jsonData);
            renderMultipleBarChart(dataGraphic);
        }

        $("#printGraph").click(function () {
            chart.print();
        });

        $('#filters').on('click', '#quickFilter', function () {

            var idReport = $('#IdReport').val();
            var data = {
                id: idReport,
                filters: GetQuickFilters()
            };
            var data = JSON.stringify({ 'data': data });
            //var url = url_content + "Frontal/Report/DetailedReport?id=" + idReport + "&filters=" + filters;
            //window.location.href = url; 
            $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: url_content + "Frontal/Report/BarsGraphic",
                data: data,
                success: function (strData) {
                    var jsonData = JSON.parse(strData);
                    var dataGraphic = {};

                    if (Object.keys(jsonData[0]).length === 2) {
                        dataGraphic = getSingleBarData(jsonData);
                        renderSingleBarChart(dataGraphic, jsonData);
                    } else {
                        dataGraphic = getMultipleBarData(jsonData);
                        renderMultipleBarChart(dataGraphic);
                    }

                },
                failure: function (response) {

                }
            });
        });
    });

    function GetAutoCompleteData(data, nameId, nameDesc) {
        var AutoCompleteData = [];
        debugger;
        var idT = 'data[i].' + nameId;
        var descT = 'data[i].' + nameDesc;
        for (var i = 0; i < data.length; i++) {
            AutoCompleteData.push({
                id: eval(idT),
                text: eval(descT)
            });
        }
        return AutoCompleteData;
    }

    function GetQuickFilters() {
        var result = [];
        var obj = {};
        var items = $('.filter-item');
        for (var i = 0; i < items.length; i++) {
            var physicalName = $(items[i]).data('physicalname');
            var values = $(items[i]).find('.control-value');
            var val = '';
            if (values.length == 1)
                val = $($(items[i]).find('.control-value')).val();
            else {
                for (var j = 0; j < values.length; j++) {
                    val += ($(values[j]).val() == '') ? '-1;' : $(values[j]).val() + ';';
                }
            }
            obj = {
                PhysicalName: physicalName,
                Valor: val
            };
            result.push(obj);
            //result += physicalName + '%' + val + '|';
        }
        return result;
    }

    function renderSingleBarChart(dataGraphic, jsonData) {
        var fieldX = Object.keys(jsonData[0])[0];
        var fieldY = Object.keys(jsonData[0])[1];

        // Create the chart
        chart = Highcharts.chart('flot-chart', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Bars Report',
            },
            xAxis: {
                type: 'category'
            },
            yAxis: {
                title: {
                    text: fieldY
                }
            },
            legend: {
                enabled: false
            },
            plotOptions: {
                series: {
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '{point.y:.1f}'
                    }
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b><br/>'
            },

            series: [{
                name: fieldX,
                colorByPoint: true,
                data: dataGraphic
            }]
        });

        setTimeout(function () { $(".highcharts-credits").css("display", "none"); }, 200);
    }

    function renderMultipleBarChart(dataGraphic) {
        var categories = getMultipleBarCategories(dataGraphic);
        var renglones = getMultipleBarRenglones(dataGraphic);
        var data = formatMultipleBarData(dataGraphic, categories, renglones);

        chart = Highcharts.chart('flot-chart', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Multiple Bars Report'
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle',
                floating: true,
                borderWidth: 1,
                backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
            },
            xAxis: {
                categories: categories,
                crosshair: true
            },
            yAxis: {
                min: 0,
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: data
        });
    }

    function getMultipleBarCategories(dataGraphic) {
        var arr = [];

        dataGraphic.forEach(function (item, index) {
            arr.push(item["category"]);
        });

        arr = $.grep(arr, function (v, k) {
            return $.inArray(v, arr) === k;
        });

        return arr
    }

    function getMultipleBarRenglones(dataGraphic) {
        var arr = [];

        dataGraphic.forEach(function (item, index) {
            arr.push(item["renglon"]);
        });

        arr = $.grep(arr, function (v, k) {
            return $.inArray(v, arr) === k;
        });

        return arr
    }

    function getSingleBarData(jsonData) {
        var dataSet = [];
        jsonData.forEach(function (item, index) {
            var fieldName = Object.keys(jsonData[0])[0];
            var fieldY = Object.keys(jsonData[0])[1];
            dataSet.push({ name: item[fieldName], y: item[fieldY], drilldown: item[fieldName]});
        });
        return dataSet
    }

    function getMultipleBarData(dataGraphic) {
        var dataSet = [];
        dataGraphic.forEach(function (item, index) {
            var fieldCol, fieldRenglon, fieldValor;
            Object.keys(item).map(function (k) {
                if (k.indexOf("Columna") !== -1)
                    fieldCol = k;
                if (k.indexOf("Renglón") !== -1)
                    fieldRenglon = k;
                if (k.indexOf("Valor") !== -1)
                    fieldValor = k;
            });
            dataSet.push({ category: item[fieldCol], renglon: item[fieldRenglon], valor: item[fieldValor] });
        });


        return dataSet
    }

    function formatMultipleBarData(dataGraphic, categories, renglones) {
        var result = [];
        renglones.forEach(function (itemRenglon, indexRenglon) {
            var renglon = [];
            categories.forEach(function (itemCategory, indexCategory) {
                dataGraphic.forEach(function (itemData, indexData) {
                    if (itemData.renglon === itemRenglon && itemData.category === itemCategory) {
                        value = itemData.valor;
                        renglon.push(value);
                    }
                });
            });
            result.push({ name: itemRenglon, data: renglon });
        });

        return result;
    }

    function isDate(str) {
        var dateReg = /^\d{4}[./-]\d{2}[./-]\d{2}T\d{2}:\d{2}:\d{2}$/;
        return dateReg.test(str);
    }

    var advanceSearchQuery = "", isVendedorTextSearch = true;

    $('#AdvanceFilter').click(function () {
        ajaxindicatorstart('Loading data.. please wait..');
        GetFiltersPopup();
    });

    var objectId = '@ViewBag.ObjectId';
    
    function GetFiltersPopup(objId) {
        
        var o = (objId == null) ? objectId : objId;
        if (o != objectId)
            previousObjectId = currentObjectIdPopUp;
        else
            previousObjectId = '';
        currentObjectIdPopUp = o;
        
        $.ajax({
            url: "@Url.Action("GetSpartan_Report_AdvanceFilter")?ReportId=@ViewBag.IdReport&object_id=" + currentObjectIdPopUp,
            type: "GET",
        async: true,
        success: function (result) {
            if (result.data.length > 0) {
                for (var i = 0; i < result.data.length; i++) {
                    AdvanceFilters.push({
                        checke: result.data[i].Visible,
                        attributeId: result.data[i].AttributeId,
                        physicalName: result.data[i].AttributeIdPhysical_Name,
                        from: result.data[i].Defect_Value_From,
                        to: result.data[i].Defect_Value_To,
                        objectId: result.data[i].ObjectId,
                        campoquery: result.data[i].CampoQuery
                    });
                }
                $.ajax({
                    url: "@Url.Action("AdvanceFilterPopUp")?reportId=@ViewBag.IdReport&objectId=" + currentObjectIdPopUp,
                    type: "GET",
                async: true,
                success: function (data) {
                    $("#AddEditFiltersModal-form").off('hidden.bs.modal').on('hidden.bs.modal', function () {

                        $(this).removeData('bs.modal');
                        $(this).data('bs.modal', null);
                        if (previousObjectId != null && previousObjectId != '') {
                            GetFiltersPopup(previousObjectId);
                        }
                        else {
                            FilterAdvancePost();
                        }
                    });

                    $(".AddEditFiltersModal").html(data);
                    $('#AddEditFiltersModal-form').modal({
                        keyboard: false,
                        backdrop: 'static'
                    });
                    debugger;
                    ajaxindicatorstop();
                },
                error: function () {
                    ajaxindicatorstop();
                }
            });
        }
    else {
		showNotification('No existen filtros avanzados', "error");
        $('#AddEditFiltersModal-form').modal('hide');
        ajaxindicatorstop();
    }
    },
    error: function () {
        ajaxindicatorstop();
    }
                
    });
        
    }
    var AdvanceFilters = [];
    var currentObjectIdPopUp = '';
    var previousObjectId = '';

    function FilterAdvancePost(){
        var idReport = $('#IdReport').val();
        var data = {
            id: idReport,
            filters: GetAdvanceFilters(),
            type: 'advance'
        };
        var data = JSON.stringify({ 'data': data });
        $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            url: url_content + "Frontal/Report/DetailedReport",
            data: data,
            success: function (strData) {
                var jsonData = JSON.parse(strData);
                var model = generateModel(jsonData);
                if ($.fn.DataTable.isDataTable('#tblReport')) {
                    $("#tblReport").empty();
                    $("#tblReport").DataTable().destroy();
                }
                if (jsonData != '')
                    $("#tblReport").DataTable(model);
                    
            },
            failure: function (response) {
                    
            }
        });

        function GetAdvanceFilters() {
            var result = [];
            var obj = {};
            var items = AdvanceFilters;
            for (var i = 0; i < items.length; i++) {
                var physicalName = items[i].campoQuery;
                var val = '';
                var values1 = items[i].from;
                var values2 = items[i].to;
                if (values2 != null && values2 != '') {
                    val = values1 + ';' + values2;
                }
                else {
                    val = values1;
                }
            
                obj = {
                    PhysicalName: physicalName,
                    Valor: val
                };
                result.push(obj);
            }
            return result;
        }
    }
</script>

@section Styles {
}

@section Scripts {
@Scripts.Render("~/Scripts/BootstrapDatePicker/moment.js")
}
<script src="~/Scripts/plugins/highcharts/highcharts.js"></script>
<script src="~/Scripts/plugins/highcharts/modules/data.js"></script>
<script src="~/Scripts/plugins/highcharts/modules/exporting.js"></script>
